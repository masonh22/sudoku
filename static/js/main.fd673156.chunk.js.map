{"version":3,"sources":["serviceWorker.js","sudoku.js","index.js"],"names":["Boolean","window","location","hostname","match","checkUpdate","nums","p","i","j","row","Math","floor","col","boxTop","boxLeft","elts","includes","push","bfCallback","board","callback","bfCallbackHelper","givens","newNums","slice","ret","makeGivens","length","Square","props","className","selected","onClick","key","val","value","Undo","Board","this","squares","squareClick","rows","renderSquare","makeRows","React","Component","Game","state","history","Array","fill","stepNumber","keyIn","bind","setState","console","log","newStep","e","isNaN","concat","parseInt","x","updateNums","addEventListener","removeEventListener","undoClick","bfSolveCallback","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd673156.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\r\n * This file is for Sudoku algorithms. A Sudoku board is represented\r\n * as a reference that contains one list with the indices of all given\r\n * numbers and another that represents the values in each position\r\n */\r\n\r\n//Checks whether a board is still correct after updating at position [i]\r\nconst checkUpdate = (nums, p) => {\r\n  const row = Math.floor(p / 9);\r\n  const col = p % 9;\r\n  const boxTop = row < 3 ? 0 : row < 6 ? 3 : 6;\r\n  const boxLeft = col < 3 ? 0 : col < 6 ? 3 : 6;\r\n  let elts = [];\r\n  let i;\r\n  let j;\r\n  //Check row\r\n  for (i = row * 9; i < row * 9 + 9; i++) {\r\n    if (nums[i] !== null) {\r\n      if (elts.includes(nums[i])) {\r\n        return false;\r\n      }\r\n      elts.push(nums[i]);\r\n    }\r\n  }\r\n  elts = [];\r\n  //Check col\r\n  for (i = col; i < 81; i = i + 9) {\r\n    if (nums[i] !== null) {\r\n      if (elts.includes(nums[i])) {\r\n        return false;\r\n      }\r\n      elts.push(nums[i]);\r\n    }\r\n  }\r\n  elts = [];\r\n  //Check box\r\n  for (i = boxTop * 9; i < boxTop * 9 + 27; i = i + 9) {\r\n    for (j = boxLeft; j < boxLeft + 3; j++) {\r\n      if (nums[i + j] !== null) {\r\n        if (elts.includes(nums[i + j])) {\r\n          return false;\r\n        }\r\n        elts.push(nums[i + j]);\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Outputs each step with callback function\r\nconst bfCallbackHelper = (nums, givens, i, j, callback) => {\r\n  if (i > 80) {\r\n    callback(nums);\r\n    return nums;\r\n\r\n  } else if (i === givens[j]) {\r\n    //If the cell is given, skip\r\n    callback(nums);\r\n    return bfCallbackHelper(nums, givens, i + 1, j + 1, callback);\r\n\r\n  } else if (nums[i] !== 9) {\r\n    //At this point, we are going to mutate the board. Instead, we want to create a new one and modify that\r\n    const newNums = nums.slice();\r\n    //As long as the current number is not 9, we try the next number\r\n    newNums[i] = newNums[i] + 1;\r\n    callback(newNums);\r\n    if (!checkUpdate(newNums, i)) {\r\n      //If the new number does not work\r\n      return bfCallbackHelper(newNums, givens, i, j, callback);\r\n    }\r\n    const ret = bfCallbackHelper(newNums, givens, i + 1, j, callback);\r\n    if (ret === null) {\r\n      return bfCallbackHelper(newNums, givens, i, j, callback);\r\n    }\r\n    return ret;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n// Outputs each step with a cakkback function\r\nconst bfCallback = (board, callback) =>\r\n  bfCallbackHelper(board.nums, board.givens, 0, 0, callback);\r\n\r\n// For now, this assumes that the board has only the given numbers\r\nconst bfHelper = (nums, givens, i, j) => {\r\n  if (i > 80) {\r\n    return nums;\r\n\r\n  } else if (i === givens[j]) {\r\n    //If the cell is given, skip\r\n    return bfHelper(nums, givens, i + 1, j + 1);\r\n\r\n  } else if (nums[i] !== 9) {\r\n    //At this point, we are going to mutate the board. Instead, we want to create a new one and modify that\r\n    const newNums = nums.slice();\r\n    //As long as the current number is not 9, we try the next number\r\n    newNums[i] = newNums[i] + 1;\r\n    if (!checkUpdate(newNums, i)) {\r\n      //If the new number does not work\r\n      return bfHelper(newNums, givens, i, j);\r\n    }\r\n    const ret = bfHelper(newNums, givens, i + 1, j);\r\n    if (ret === null) {\r\n      return bfHelper(newNums, givens, i, j);\r\n    }\r\n    return ret;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst bruteForce = board => bfHelper(board.nums, board.givens, 0, 0);\r\n\r\nconst makeGivens = nums => {\r\n  const givens = [];\r\n  for (let i = 0; i < nums.length; i++) {\r\n    if (nums[i] !== null) {\r\n      givens.push(i);\r\n    }\r\n  }\r\n  return givens;\r\n}\r\n\r\nexport { bruteForce, bfCallback, makeGivens };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { makeGivens, bfCallback } from './sudoku.js';\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction Square(props) {\n  return (\n    <td\n      className={props.selected ? \"square selected\" : \"square\"}\n      onClick={props.onClick}\n      key={props.val}>\n      {props.value}\n    </td>\n  );\n}\n\nfunction Undo(props) {\n  return (\n    <button\n      className=\"undo\"\n      onClick={props.onClick}>\n      Undo\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        selected={this.props.selected === i}\n        onClick={() => this.props.squareClick(i)}\n        val={i} />\n    );\n  }\n\n  makeRows() {\n    const rows = [];\n    for (var i = 0; i < 9; i++) {\n      const row = [];\n      for (var j = 0; j < 9; j++) {\n        row.push(this.renderSquare(i * 9 + j));\n      }\n      rows.push(<tr key={i}>{row}</tr>);\n    }\n    return rows;\n  }\n\n  render() {\n    return (\n      <div>\n        <table className=\"board\">\n          <tbody>\n            {this.makeRows()}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [Array(81).fill(null)],\n      selected: null,\n      stepNumber: 0,\n    };\n    this.keyIn = this.keyIn.bind(this);\n    //this.bfSolveCallback = this.keyIn.bind(this);\n  }\n\n  squareClick(i) {\n    this.setState({\n      selected: i,\n    });\n  }\n\n  undoClick() {\n    console.log('undo');\n    this.setState(state => {\n      const newStep = state.stepNumber === 0 ? 0 : state.stepNumber - 1;\n      return {\n        stepNumber: newStep,\n        history: state.history.slice(0, newStep + 1),\n      }\n    });\n  }\n\n  keyIn(e) {\n    if (!e) {\n      return;\n    }\n    if (!isNaN(e.key) && e.key !== '0') {\n      console.log('key in');\n      this.setState(state => {\n        const squares = state.history[state.stepNumber].slice();\n        squares[state.selected] = parseInt(e.key);\n        return {\n          history: state.history.concat([squares]),\n          stepNumber: state.stepNumber + 1,\n        };\n      });\n    } else if (e.key === 'Backspace') {\n      this.setState(state => {\n        const squares = state.history[state.stepNumber].slice();\n        squares[state.selected] = null;\n        return {\n          history: state.history.concat([squares]),\n          stepNumber: state.stepNumber + 1,\n        }\n      });\n    }\n  }\n\n  updateNums(newNums) {\n    //sleep(50);\n    this.setState(state => ({\n      history: state.history.concat([newNums]),\n      stepNumber: state.stepNumber + 1,\n    }));\n  }\n\n  bfSolveCallback() {\n    console.log('starting solve');\n    bfCallback({\n      nums: this.state.history[this.state.stepNumber],\n      givens: makeGivens(this.state.history[this.state.stepNumber]),\n    },\n      x => this.updateNums(x));\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.keyIn);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.keyIn);\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={this.state.history[this.state.history.length - 1]}\n            selected={this.state.selected}\n            squareClick={(i) => this.squareClick(i)}\n          />\n        </div>\n        <Undo onClick={() => this.undoClick()} />\n        <button\n          className=\"solve\"\n          onClick={() => this.bfSolveCallback()}>\n          Solve\n        </button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}