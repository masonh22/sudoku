{"version":3,"sources":["serviceWorker.js","sudoku.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","checkUpdate","nums","p","i","j","row","Math","floor","col","boxTop","boxLeft","elts","includes","push","bfSteps","board","bfStepsHelper","givens","acc","newNums","slice","ret","bruteForce","bfHelper","makeGivens","length","Square","props","className","selected","onClick","key","val","value","Undo","Board","this","squares","squareClick","rows","renderSquare","makeRows","React","Component","Game","state","history","Array","fill","stepNumber","keyIn","bind","setState","console","log","newStep","e","isNaN","concat","parseInt","algorithm","solved","solve","setTimeout","playback","setInterval","clearInterval","addEventListener","removeEventListener","undoClick","clear","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ceec375b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\r\n * This file is for Sudoku algorithms. A Sudoku board is represented\r\n * as a reference that contains one list with the indices of all given\r\n * numbers and another that represents the values in each position\r\n */\r\n\r\n//Checks whether a board is still correct after updating at position [i]\r\nconst checkUpdate = (nums, p) => {\r\n  const row = Math.floor(p / 9);\r\n  const col = p % 9;\r\n  const boxTop = row < 3 ? 0 : row < 6 ? 3 : 6;\r\n  const boxLeft = col < 3 ? 0 : col < 6 ? 3 : 6;\r\n  let elts = [];\r\n  let i;\r\n  let j;\r\n  //Check row\r\n  for (i = row * 9; i < row * 9 + 9; i++) {\r\n    if (nums[i] !== null) {\r\n      if (elts.includes(nums[i])) {\r\n        return false;\r\n      }\r\n      elts.push(nums[i]);\r\n    }\r\n  }\r\n  elts = [];\r\n  //Check col\r\n  for (i = col; i < 81; i = i + 9) {\r\n    if (nums[i] !== null) {\r\n      if (elts.includes(nums[i])) {\r\n        return false;\r\n      }\r\n      elts.push(nums[i]);\r\n    }\r\n  }\r\n  elts = [];\r\n  //Check box\r\n  for (i = boxTop * 9; i < boxTop * 9 + 27; i = i + 9) {\r\n    for (j = boxLeft; j < boxLeft + 3; j++) {\r\n      if (nums[i + j] !== null) {\r\n        if (elts.includes(nums[i + j])) {\r\n          return false;\r\n        }\r\n        elts.push(nums[i + j]);\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Add comment maybe\r\nconst bfStepsHelper = (nums, givens, i, j, acc) => {\r\n  if (i > 80) {\r\n    return acc;\r\n\r\n  } else if (i === givens[j]) {\r\n    //If the cell is given, skip\r\n    return bfStepsHelper(nums, givens, i + 1, j + 1, acc);\r\n\r\n  } else if (nums[i] !== 9) {\r\n    //As long as the current number is not 9, we try the next number\r\n    const newNums = nums.slice()\r\n    newNums[i] = newNums[i] + 1;\r\n    acc.push(newNums);\r\n    if (!checkUpdate(newNums, i)) {\r\n      //If the new number does not work\r\n      return bfStepsHelper(newNums, givens, i, j, acc);\r\n    }\r\n    const ret = bfStepsHelper(newNums, givens, i + 1, j, acc);\r\n    if (ret === null) {\r\n      return bfStepsHelper(newNums, givens, i, j, acc);\r\n    }\r\n    return ret;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n// Outputs an array containing each step in order\r\nconst bfSteps = board => {\r\n  const sol = bfStepsHelper(board.nums, board.givens, 0, 0, []);\r\n  return sol.slice();\r\n}\r\n\r\n// For now, this assumes that the board has only the given numbers\r\nconst bfHelper = (nums, givens, i, j) => {\r\n  if (i > 80) {\r\n    return [nums];\r\n\r\n  } else if (i === givens[j]) {\r\n    //If the cell is given, skip\r\n    return bfHelper(nums, givens, i + 1, j + 1);\r\n\r\n  } else if (nums[i] !== 9) {\r\n    //At this point, we are going to mutate the board. Instead, we want to create a new one and modify that\r\n    const newNums = nums.slice();\r\n    //As long as the current number is not 9, we try the next number\r\n    newNums[i] = newNums[i] + 1;\r\n    if (!checkUpdate(newNums, i)) {\r\n      //If the new number does not work\r\n      return bfHelper(newNums, givens, i, j);\r\n    } else {\r\n      const ret = bfHelper(newNums, givens, i + 1, j);\r\n      if (ret === null) {\r\n        return bfHelper(newNums, givens, i, j);\r\n      } else {\r\n        return ret;\r\n      }\r\n    }\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst bruteForce = board => bfHelper(board.nums, board.givens, 0, 0);\r\n\r\nconst makeGivens = nums => {\r\n  const givens = [];\r\n  for (let i = 0; i < nums.length; i++) {\r\n    if (nums[i] !== null) {\r\n      givens.push(i);\r\n    }\r\n  }\r\n  return givens;\r\n}\r\n\r\nexport { bruteForce, bfSteps, makeGivens };\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { makeGivens, bfSteps, bruteForce } from './sudoku.js';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <td\r\n      className={props.selected ? \"square selected\" : \"square\"}\r\n      onClick={props.onClick}\r\n      key={props.val}>\r\n      {props.value}\r\n    </td>\r\n  );\r\n}\r\n\r\nfunction Undo(props) {\r\n  return (\r\n    <button\r\n      className=\"undo\"\r\n      onClick={props.onClick}>\r\n      Undo\r\n    </button>\r\n  )\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        selected={this.props.selected === i}\r\n        onClick={() => this.props.squareClick(i)}\r\n        val={i} />\r\n    );\r\n  }\r\n\r\n  makeRows() {\r\n    const rows = [];\r\n    for (var i = 0; i < 9; i++) {\r\n      const row = [];\r\n      for (var j = 0; j < 9; j++) {\r\n        row.push(this.renderSquare(i * 9 + j));\r\n      }\r\n      rows.push(<tr key={i}>{row}</tr>);\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table className=\"board\">\r\n          <tbody>\r\n            {this.makeRows()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [Array(81).fill(null)],\r\n      selected: null,\r\n      stepNumber: 0,\r\n    };\r\n    this.keyIn = this.keyIn.bind(this);\r\n  }\r\n\r\n  squareClick(i) {\r\n    this.setState({\r\n      selected: i,\r\n    });\r\n  }\r\n\r\n  undoClick() {\r\n    console.log('undo');\r\n    this.setState(state => {\r\n      const newStep = state.stepNumber === 0 ? 0 : state.stepNumber - 1;\r\n      return {\r\n        stepNumber: newStep,\r\n        history: state.history.slice(0, newStep + 1),\r\n      }\r\n    });\r\n  }\r\n\r\n  keyIn(e) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    if (!isNaN(e.key) && e.key !== '0') {\r\n      console.log('key in');\r\n      this.setState(state => {\r\n        const squares = state.history[state.stepNumber].slice();\r\n        squares[state.selected] = parseInt(e.key);\r\n        return {\r\n          history: state.history.concat([squares]),\r\n          stepNumber: state.stepNumber + 1,\r\n        };\r\n      });\r\n    } else if (e.key === 'Backspace') {\r\n      this.setState(state => {\r\n        const squares = state.history[state.stepNumber].slice();\r\n        squares[state.selected] = null;\r\n        return {\r\n          history: state.history.concat([squares]),\r\n          stepNumber: state.stepNumber + 1,\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  solve(algorithm) {\r\n    console.log('solving');\r\n    const solved = algorithm({\r\n      nums: this.state.history[this.state.stepNumber],\r\n      givens: makeGivens(this.state.history[this.state.stepNumber]),\r\n    });\r\n    this.setState(state => ({\r\n      history: state.history.concat(solved),\r\n      stepNumber: state.stepNumber + solved.length,\r\n    }));\r\n  }\r\n\r\n  //Still starts at step 0\r\n  bfSolveSteps() {\r\n    this.solve(bfSteps);\r\n    setTimeout(() => {\r\n      let i = 0;\r\n      let playback = setInterval(() => {\r\n        this.setState({\r\n          stepNumber: i,\r\n        });\r\n        i++;\r\n        if (i === this.state.history.length) {\r\n          clearInterval(playback);\r\n        }\r\n      }, 1)\r\n    }, 100)\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      history: [Array(81).fill(null)],\r\n      selected: null,\r\n      stepNumber: 0,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.keyIn);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.keyIn);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.history[this.state.stepNumber]}\r\n            selected={this.state.selected}\r\n            squareClick={(i) => this.squareClick(i)}\r\n          />\r\n        </div>\r\n        <Undo onClick={() => this.undoClick()} />\r\n        <button\r\n          className=\"clear\"\r\n          onClick={() => this.clear()}>\r\n          Clear\r\n        </button>\r\n        <button\r\n          className=\"solve\"\r\n          onClick={() => this.solve(bruteForce)}>\r\n          Solve\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}